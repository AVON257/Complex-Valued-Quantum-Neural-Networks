This is some of the source code and some results from a modified version of the Ultralytics package with YOLO11 and RTDETR in it.
https://github.com/ultralytics/ultralytics 

I offer full credit to Ultralytics for their work on this package including both YOLO11 and RTDETR, but I claim the credit for implementing the modified quantum circuits which have been used to make this particular version of the algorithms work.

Please install Pennylane, Pennylane lightning, lightning tensor, pytorch and other standard requirements to use it.
Please also note that Nvidia CU-Quantum can help with this particular work, although it can in theory be used on AMD hardware in much the same way as the ordinary Ultralytics package can, this has not been tested at the time of writing.

It was developed on a RTX3090 GPU (and only 1 of it).

Finally please copy the neural network folder from here and then paste it into the ultralytics folder in order to use it, once that is done then you just need to type pip install ./path-to-ultralytics folder.
That will install the Ultralytics package with these modifications, but I would like to point out that I did not actually create the Ultralytics package, what I have done however is modify it to use certain simulated quantum circuits to attempt to improve its detection capabilities such as on the transformer layers such as the ones used in RTDETR (E.g. HGBlock).

Note that this does NOT contain the whole Ultralytics package at this time, but it does contain the necessary modified parts of it needed to make this algorithm work.

There is also a quantum tensor networks version of both YOLO11 and RTDETR algorithms under development at the moment, although at the time of writing RTDETR-Quantum (particularly the XL version of this) doesn't work well on Coco, and is currently being tested on LVIS to see what happens if this is
attempted.

I have attached results from a prototype for LVIS here and I would like to share that with you. This one has quantum tensor networks in place of the multihead transformer attention layers, and modified loss functions which use complex manifolds, and toroidal coordinates to make it work.

Note that this one has been designed to handle demanding scenes with shears and rotations involved. It is based on YOLOE, please see the root directory of my repository for details.
